Test date: 09/24/24  15:35:09 
The number of times you used the grading program is 15 
In the business world, your customer replaces the grading program. 
The goal is a correct program with the fewest grading attempts. 
Key Grading System Version 4.1
Student: Last=Viscount             First=Brendan              Type=Individual          
Grading program history
       User Test.    Date: 09/18/24  14:33:39  keyboard     test         
       User Test.    Date: 09/18/24  14:34:39  nt           test         
       User Test.    Date: 09/18/24  14:35:10  keyboard     test         
       User Test.    Date: 09/18/24  14:35:16  keyboard     test         
   *** Grading Run.  Date: 09/18/24  14:36:03 
       User Test.    Date: 09/18/24  14:40:26  nt           test         
       User Test.    Date: 09/18/24  14:51:57  keyboard     test         
       User Test.    Date: 09/18/24  14:55:40  keyboard     test         
       User Test.    Date: 09/18/24  14:56:59  keyboard     test         
       User Test.    Date: 09/18/24  15:02:55  nt           test         
       User Test.    Date: 09/18/24  15:07:50  nt           test         
       User Test.    Date: 09/18/24  15:28:55  nt           test         
   *** Grading Run.  Date: 09/18/24  15:29:01 
       User Test.    Date: 09/18/24  15:29:12  keyboard     test         
       User Test.    Date: 09/18/24  15:32:39  nt           test         
       User Test.    Date: 09/18/24  15:40:45  keyboard     test         
       User Test.    Date: 09/18/24  16:28:36  nt           test         
       User Test.    Date: 09/18/24  16:28:45  keyboard     test         
   *** Grading Run.  Date: 09/18/24  16:29:48 
       User Test.    Date: 09/18/24  16:31:43  keyboard     test         
   *** Grading Run.  Date: 09/18/24  16:35:02 
       User Test.    Date: 09/18/24  16:42:11  keyboard     test         
       User Test.    Date: 09/18/24  16:42:37  nt           test         
       User Test.    Date: 09/18/24  19:26:48  keyboard     test         
       User Test.    Date: 09/18/24  19:39:58  keyboard     test         
       User Test.    Date: 09/18/24  19:40:07  keyboard     test         
       User Test.    Date: 09/18/24  19:40:49  nt           test         
       User Test.    Date: 09/18/24  19:43:32  keyboard     test         
   *** Grading Run.  Date: 09/19/24  10:21:22 
       User Test.    Date: 09/20/24  15:04:52  keyboard     test         
   *** Grading Run.  Date: 09/20/24  15:05:24 
       User Test.    Date: 09/20/24  15:16:13  keyboard     test         
       User Test.    Date: 09/20/24  15:16:30  nt           test         
   *** Grading Run.  Date: 09/20/24  15:16:36 
       User Test.    Date: 09/20/24  15:17:33  keyboard     test         
   *** Grading Run.  Date: 09/20/24  15:18:34 
       User Test.    Date: 09/20/24  15:21:52  keyboard     test         
       User Test.    Date: 09/20/24  15:41:08  keyboard     test         
       User Test.    Date: 09/20/24  15:41:22  nt           test         
   *** Grading Run.  Date: 09/20/24  15:41:30 
       User Test.    Date: 09/20/24  15:47:00  keyboard     test         
   *** Grading Run.  Date: 09/20/24  15:47:16 
       User Test.    Date: 09/23/24  19:04:00  keyboard     test         
       User Test.    Date: 09/23/24  19:05:12  nt           test         
       User Test.    Date: 09/23/24  19:08:42  nt           test         
       User Test.    Date: 09/23/24  19:17:27  nt           test         
   *** Grading Run.  Date: 09/23/24  19:17:37 
       User Test.    Date: 09/23/24  19:30:56  nt           test         
   *** Grading Run.  Date: 09/23/24  19:31:03 
       User Test.    Date: 09/23/24  19:37:45  nt           test         
   *** Grading Run.  Date: 09/23/24  19:37:53 
       User Test.    Date: 09/24/24  15:26:51  nt           test         
       User Test.    Date: 09/24/24  15:26:55  keyboard     test         
   *** Grading Run.  Date: 09/24/24  15:27:04 
       User Test.    Date: 09/24/24  15:35:02  nt           test         
   *** Grading Run.  Date: 09/24/24  15:35:09 
Running test
Test ran correctly.
++ Grade ++   60 = Points earned for correct answers.

-> A major reason for programming in assembler is to maximize efficiency.
This can be instructions written and/or instructions executed.
Please read the section in the class notes titled Code Complexity.

We are now analyzing your source code. You will be graded on
the number of instructions you wrote to solve this problem.
The target for the number of executable instructions written is:
20 points for   0 -  20  
15 points for  21 -  22  
10 points for  23 -  24 
05 points for  25 -  26 
00 points for  27+      
Your actual counts are:
Lines ....... 111    Comments ...  76    Labels .......   4   
Directives ..   6    Variables ..   1    Executables ..  24    McCabe ..   8 
++ Grade ++   10 = Points earned for code written efficiency.  

The McCabe number for your KEY.ASM is 8 which is considered 
fine for the KEY assignment and indicates reasonable program structure.

-> Analyzing program documentation. 
The heuristic algorithms used may have problems with your specific code. 
Contact the instructor if you detect a problem with your grade. 
DOCPH-0041 The program header format is adequate. 
DOCHB-0.88 Use of code block headers is adequate. 
DOCLC-0.92 Use of line comments is adequate. 
++ Grade ++   20 = Points earned for correct documentation.    

-> Calculating the total grade for the program.                  
This grade is subject to adjustment by the instructor.           
This grade will be reduced by any late submission penalty.       
++ Grade ++   90 = Total grade generated by the Grading System.  

-> Statistics on testing and grading                             
    41  = Number of user tests.                                  
    15  = Number of grading runs to get the program working.     
     0  = Number of grading runs to improve efficiency or documentation. 

+- atyC<6&}xC76&k~C6&juiC86&zuzC?6&Zkyz&jgzk@&6?58:58:&&7;@9;@6?&

Building the file key.ans for electronic submission...
;--------------------------------------------------------------------
;   Program:     COPYFILE *** MASM VERSION ***
;
;   Function:    This program will read characters from the standard input
;                device.  This can be the keyboard or a file that has been
;                redirected to the standard input.
;
;                It allows the software to examine each character.
;
;                The character is then written to the standard output device.
;                This can be the diplay or a file that has been redirected
;                to the standard output.
;
;                The program terminates when the character that has been
;                read and echoed matches the character stored in the
;                variable named 'end_char'.
;
;                If reading from the keyboard then
;                set 'end_char' to be 0Dh (enter key).
;
;                If reading from a file then
;                set 'end_char' to be 1Ah (DOS eof character).
;
;                These are the four possible combinations
;                for reading and writing data:
;                -----------------------------------------------------------
;                copyfile                    input=keyboard   output=display
;                copyfile < input            input=file       output=display
;                copyfile > output           input=keyboard   output=file
;                copyfile < input > output   input=file       output=file
;
;   Restriction: The program hangs if you copy a file without the
;                an EOF character.
;
;   Owner:       Dana Lasher
;
;   Date         Reason
;   ----         ------
;   07/18/2000   New version
;
;---------------------------------------
         .model    small               ; 64k data and 64k code model
         .8086                         ; only allow 8086 instructions
         .stack    256                 ; stack size is 256 bytes
;---------------------------------------

         .data
;---------------------------------------
; The program ends when the last character
; read and echoed matches this variable.
; 1Ah=EOF   0Dh=ENTER
;---------------------------------------
end_char db        0Dh                 ; termination character
;---------------------------------------
         .code
;---------------------------------------
; Establish addressability to the data segment.
;---------------------------------------
start:                                 ;
         mov       ax,@data            ; establish addressability
         mov       ds,ax               ; for the data segment
;---------------------------------------
; Read a charcter without echo.
;---------------------------------------
getloop:                               ;
         mov       ah,8                ; read without echo a character
         int       21h                 ; how: set ah=8 and issue int 21
;---------------------------------------
; The character is now available in the
; al register for processing.
;---------------------------------------
		 ;cmp       al, [end_char]       ; is NULL terminator?
		 ;je        exit				    ; if null jmp exit

		 cmp       al,20h              ; compare with space
         je        write_char          ; if equal, jump to write_char
         cmp       al,2Eh              ; compare with period
         je        write_char          ; if equal, jump to write_char

         cmp       al,41h              ; compare with 'A'              cmp       al, 41h
         jb        getloop             ; if below 'A', discard
         cmp       al,5Ah              ; compare with 'Z'
         jbe 	   write_char          ; jump to write_char
		 
                                       ; Check if character is an uppercase letter (A-Z)
         cmp       al,61h              ; compare with 'a'
         jb        getloop             ; if below 'a', check for uppercase letters
         cmp       al,7Ah              ; compare with 'z'
         ja        getloop             ; if above 'z', check for other characters
         sub       al,20h        	   ; jump to write_char
		
;---------------------------------------
; Write out the character and loop if it
; is not the terminating character.
;---------------------------------------
write_char:
         mov       dl,al               ; move the char to dl
         mov       ah, 2               ; write the character from dl
         int       21h          	   ; how: set ah=2 and issue int 21
		 
		 cmp       al, 2Eh			   ; 
		 jne       getloop             ; 
;---------------------------------------
; When the terminating characater has
; been read and echoed, return to DOS.
;---------------------------------------
exit:                                  ; we processed the terminating character
         mov       ax,4c00h            ; set correct exit code in ax
         int       21h                 ; int 21 will terminate program
         end       start               ; execution begins at the label start
;---------------------------------------