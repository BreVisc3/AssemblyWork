HW7 - Subroutines 

01.  Given this subroutine.                                              
                                                                    
      subr:   push  ax                                              
              push  si                                              
              mov   ax,[si]                                         
              mov   [si],ah                                         
              mov   [si+1],al                                       
              pop   si                                              
              pop   ax                                              
              ret                                                   
                                                                    
A. The subroutine saves and restores ax and si,                     
   both of which are modified by the subroutine.                    
B. The subroutine saves and restores the si register,               
   even though the si register is not modified.                     


02.  Given this subroutine.                                              
                                                                    
      subr:   push  ax                                              
              push  si                                              
              mov   ax,[si]                                         
              mov   [si],ah                                         
              mov   [si+1],al                                       
              pop   ax                                              
              pop   si                                              
              ret                                                   
                                                                    
A. The ax and si registers are correctly saved and restored.       
B. The ax and si registers are not correctly saved and restored.   


03.  This subroutine is to copy one list to another list. Input is:         
    si points to the source list and di points to the destination list 
    cx contains the count of bytes in the source list  
    
    subr:   cmp     cx,0        ;I1  is list size zero   
            je      exit        ;I2  if yes we are done  
            push    si          ;I3  save si             
            push    di          ;I4  save di             
            push    cx          ;I5  save cx             
    movr:   mov     al,[si]     ;I6  get a byte          
            mov     [di],al     ;I7  put a byte          
            loop    movr        ;I8  repeat if more chars 
    exit:   pop     cx          ;I9  restore cx          
            pop     di          ;I10 restore di          
            pop     si          ;I11 restore si          
            ret                 ;I12 return to caller    
                                                         
If cx=0 on input then which is true about the subroutine's behavior 
A. it correctly return to the caller without moving any data        
B. it incorrectly moves 1 byte from the source to destination list  
C. it incorrectly moves 65,536 bytes from the source to destination list 
D. it has unpredictable behavior because it has misused the stack   
E. it loops forever executing instructions I6, I7, I8               


04.  You have been asked to review the following subroutine.  The       
calling program expects that all modified registers will be saved  
and restored.  Which registers are modified and should be saved    
and restored?                                                      
                                                                   
       sub:   mov  ax,[si]                                         
              add  [di],ax                                         
              mul  ax                                              
              mov  [bx],dx                                         
              ret                                                  
                                                                   
A. The only register  modified is:  ax                             
B. The only registers modified are: ax and si                      
C. The only registers modified are: ax and dx                      
D. The only registers modified are: ax and si and bx               
E. The only registers modified are: ax and di and bx               
F. The only registers modified are: ax and si and di and bx        


05.  This subroutine is to copy one list to another list. Input is:         
    si points to the source list and di points to the destination list 
    cx contains the count of bytes in the source list  
    
    subr:   cmp     cx,0        ; is list size zero    
            je      exit        ; if yes we are done   
            push    si          ; save si              
            push    di          ; save di              
            push    cx          ; save cx              
    movr:   mov     al,[si]     ; get a byte           
            mov     [di],al     ; put a byte           
            loop    movr        ; repeat if more chars 
    exit:   pop     cx          ; restore cx           
            pop     di          ; restore di           
            pop     si          ; restore si           
            ret                 ; return to caller     
                                                       
If cx is not zero then when will the subroutine correctly 
copy the source list to the destination list              
A. for all non zero values of cx 
B. only if cx=0001               
C. if cx is in the range 0001 to 00FF  (1 to 255) 
D. if cx is in the range 0001 to 7FFF  (cx appears to be positive) 
E. if cx is in the range 8000 to FFFF  (cx appears to be negative) 


CODE=KEGAI       
End of file
-