CSC23x:  Homework Grades    (code=3-57776-8) Ver 580110
Student:             Viscount,              Brendan 
Created: 10/06/24 Updated:  10/22 14:45:59  

HW#  Started        Status         Grade
HW5  10/07/24       D 10/07 12:00  068               
HW6  10/07/24       D 10/07 15:39  095               
HW7  10/08/24       D 10/08 15:12  100               
HW8  10/22/24       D 10/22 14:45  100               
VER=P983041Q1N0D00V1E0S0T6:0:51 W142200V09/02005905856

End of file     
-


**********   HW5.TXT   **********

HW5 - Multiply and Divide 

01. Given these hex values for the 8086 registers 
    AX=BB07  BX=5961  CX=6D07  DX=4E52
    What are the hex values in DX and AX after executing this instruction:

    mul  cl 

02. Was the Carry Flag set to 0 or 1 ? 

03. Given these hex values for the 8086 registers 
    AX=691E  BX=79BB  CX=0D85  DX=15B9
    What are the hex values in DX and AX after executing this instruction:

    mul  ch 

04. Was the Carry Flag set to 0 or 1 ? 

05. Given these hex values for the 8086 registers 
    AX=82FE  BX=02B0  CX=3C32  DX=AE8F
    What are the hex values in DX and AX after executing this instruction:

    imul  bh 

06. Was the Carry Flag set to 0 or 1 ? 

07. Given these hex values for the 8086 registers 
    AX=A218  BX=3BF8  CX=489D  DX=43D4
    What are the hex values in DX and AX after executing this instruction:

    imul  bl 

08. Was the Carry Flag set to 0 or 1 ? 

09. Given these hex values for the 8086 registers 
    AX=0765  BX=D2B4  CX=0004  DX=2043
    What are the hex values in DX and AX after executing this instruction:

    mul  cx 

10. Was the Carry Flag set to 0 or 1 ? 

11. Given these hex values for the 8086 registers 
    AX=BD5A  BX=560D  CX=0100  DX=112A
    What are the hex values in DX and AX after executing this instruction:

    mul  cx 

12. Was the Carry Flag set to 0 or 1 ? 

13. Given these hex values for the 8086 registers 
    AX=012F  BX=FFF7  CX=37F1  DX=91FE
    What are the hex values in DX and AX after executing this instruction:

    imul  bx 

14. Was the Carry Flag set to 0 or 1 ? 

15. Given these hex values for the 8086 registers 
    AX=9F92  BX=0100  CX=3C04  DX=0565
    What are the hex values in DX and AX after executing this instruction:

    imul  bx 

16. Was the Carry Flag set to 0 or 1 ? 

17. Given these hex values for the 8086 registers 
    AX=001B  BX=F592  CX=DD0A  DX=0DD7
    What are the hex values in DX and AX after executing this instruction:

    div  cl 

18. Given these hex values for the 8086 registers 
    AX=002F  BX=6B79  CX=0001  DX=0000
    What are the hex values in DX and AX after executing this instruction:

    div  cx 

19. Given these hex values for the 8086 registers 
    AX=0010  BX=FFFA  CX=7977  DX=9E73
    What are the hex values in DX and AX after executing this instruction:

    idiv  bl 

20. Given these hex values for the 8086 registers 
    AX=FFF7  BX=003B  CX=2E5D  DX=BFFA
    What are the hex values in DX and AX after executing this instruction:

    idiv  bl 

21. Given these hex values for the 8086 registers 
    AX=FFCC  BX=FFF7  CX=F7B2  DX=9077
    What are the hex values in DX and AX after executing this instruction:

    idiv  bl 

22. Given these hex values for the 8086 registers 
    AX=FFD7  BX=000A  CX=3945  DX=FFFF
    What are the hex values in DX and AX after executing this instruction:

    idiv  bx 

23. Given these hex values for the 8086 registers 
    AX=AC07  BX=B324  CX=910F  DX=3BEE
    Will this instruction cause a divide overflow? 

    div  ch 

24. Given these hex values for the 8086 registers 
    AX=22CD  BX=6969  CX=DCB0  DX=B6BE
    Will this instruction cause a divide overflow? 

    div  cx 

25. Given these hex values for the 8086 registers 
    AX=9255  BX=3D2D  CX=ED0B  DX=BEFE
    Will this instruction cause a divide overflow? 

    idiv  ch 

End of file
-


**********   HW5.ANS   **********

 1:4E52
 1:0031
 2:0
 3:15B9
 3:0186
 4:1
 5:AE8F
 5:FFFC
 6:1
 7:43D4
 7:FF40
 8:0
 9:0000
 9:1D94
10:0
11:00BD
11:5A00
12:1
13:FFFF
13:F849
13:FFFF
13:0849
14:0
15:FF9F
15:9200
16:1
17:0DD7
17:0702
18:0000
18:002F
19:9E73
19:F601
19:9E73
19:F6F1
20:BFFA
20:3B00
20:BFFA
20:3BFF
21:9077
21:D800
21:9077
21:01F7
22:FFF5
22:FF15
22:0006
22:FFFC
23:y
24:n
25:n
End of file
-


**********   HW6.TXT   **********

HW6 - Indirect Addressing 

These are the hex values for the 8086 pointer registers. 

    SI=0016  DI=0007  BX=0015  BP=0025

These are the hex values for the Data Segment shown 16 bytes per line. 

    0000: F1 B6 98 4F 48 73 5B 5B 63 9D AC 3C 7F 4E CB 88 
    0010: E7 72 86 1E 0D 87 F4 0C D9 A2 66 B0 41 B3 9B 1D 
    0020: 1A 09 33 BF 2E 19 66 43 8E 7B F6 B1 2A 35 62 DB 
    0030: 9E 3C 5D FB 4F 38 7E 98 B7 88 39 A9 FD 86 0E FD 

The first 5 questions access BYTE size data. 

01. What is the hex value in al after executing: mov al,[bx] 

02. What is the hex value in al after executing: mov al,[si] 

03. What is the hex value in al after executing: mov al,[di] 

04. What is the hex value in al after executing: mov al,[di+1] 

05. What is the hex value in al after executing: mov al,[di-1] 

The next 10 questions access WORD size data.

06. What is the hex value in ax after executing: mov ax,[bx] 

07. What is the hex value in ax after executing: mov ax,[si] 

08. What is the hex value in ax after executing: mov ax,[di] 

09. What is the hex value in ax after executing: mov ax,[si+7] 

10. What is the hex value in ax after executing: mov ax,[di+12] 

11. What is the hex value in ax after executing: mov ax,[bx-13] 

12. What is the hex value in ax after executing: mov ax,[bx+si] 

13. What is the hex value in ax after executing: mov ax,[bx+di] 

14. What is the hex value in ax after executing: mov ax,[bx+si+4] 

15. What is the hex value in ax after executing: mov ax,[bx+di-9] 

16. Does this instruction need a data size override:  add [bx],9  

17. From which segment (code, data, extra, stack) is the   
    source data obtained for this instruction:  sub dx,[di]  

18. From which segment (code, data, extra, stack) is the     
    source data obtained for this instruction:  mov dx,[bp+4]  

19. From which segment (code, data, extra, stack) is the     
    source data obtained for this instruction:  sub dx,[ds:bp] 

20. Is this instruction valid:  sub [dx],2  

End of file
-


**********   HW6.ANS   **********

 1:87
 2:F4
 3:5B
 4:5B
 4:63
 5:5B
 6:F487
 7:0CF4
 8:635B
 9:9BB3
10:0D1E
11:9D63
12:2AB1
13:B341
14:9EDB
15:0D1E
16:Y
17:data
18:stack
19:data
20:Y
End of file
-


**********   HW7.TXT   **********

HW7 - Subroutines 

01.  Given this subroutine.                                              
                                                                    
      subr:   push  ax                                              
              push  si                                              
              mov   ax,[si]                                         
              mov   [si],ah                                         
              mov   [si+1],al                                       
              pop   si                                              
              pop   ax                                              
              ret                                                   
                                                                    
A. The subroutine saves and restores ax and si,                     
   both of which are modified by the subroutine.                    
B. The subroutine saves and restores the si register,               
   even though the si register is not modified.                     


02.  Given this subroutine.                                              
                                                                    
      subr:   push  ax                                              
              push  si                                              
              mov   ax,[si]                                         
              mov   [si],ah                                         
              mov   [si+1],al                                       
              pop   ax                                              
              pop   si                                              
              ret                                                   
                                                                    
A. The ax and si registers are correctly saved and restored.       
B. The ax and si registers are not correctly saved and restored.   


03.  This subroutine is to copy one list to another list. Input is:         
    si points to the source list and di points to the destination list 
    cx contains the count of bytes in the source list  
    
    subr:   cmp     cx,0        ;I1  is list size zero   
            je      exit        ;I2  if yes we are done  
            push    si          ;I3  save si             
            push    di          ;I4  save di             
            push    cx          ;I5  save cx             
    movr:   mov     al,[si]     ;I6  get a byte          
            mov     [di],al     ;I7  put a byte          
            loop    movr        ;I8  repeat if more chars 
    exit:   pop     cx          ;I9  restore cx          
            pop     di          ;I10 restore di          
            pop     si          ;I11 restore si          
            ret                 ;I12 return to caller    
                                                         
If cx=0 on input then which is true about the subroutine's behavior 
A. it correctly return to the caller without moving any data        
B. it incorrectly moves 1 byte from the source to destination list  
C. it incorrectly moves 65,536 bytes from the source to destination list 
D. it has unpredictable behavior because it has misused the stack   
E. it loops forever executing instructions I6, I7, I8               


04.  You have been asked to review the following subroutine.  The       
calling program expects that all modified registers will be saved  
and restored.  Which registers are modified and should be saved    
and restored?                                                      
                                                                   
       sub:   mov  ax,[si]                                         
              add  [di],ax                                         
              mul  ax                                              
              mov  [bx],dx                                         
              ret                                                  
                                                                   
A. The only register  modified is:  ax                             
B. The only registers modified are: ax and si                      
C. The only registers modified are: ax and dx                      
D. The only registers modified are: ax and si and bx               
E. The only registers modified are: ax and di and bx               
F. The only registers modified are: ax and si and di and bx        


05.  This subroutine is to copy one list to another list. Input is:         
    si points to the source list and di points to the destination list 
    cx contains the count of bytes in the source list  
    
    subr:   cmp     cx,0        ; is list size zero    
            je      exit        ; if yes we are done   
            push    si          ; save si              
            push    di          ; save di              
            push    cx          ; save cx              
    movr:   mov     al,[si]     ; get a byte           
            mov     [di],al     ; put a byte           
            loop    movr        ; repeat if more chars 
    exit:   pop     cx          ; restore cx           
            pop     di          ; restore di           
            pop     si          ; restore si           
            ret                 ; return to caller     
                                                       
If cx is not zero then when will the subroutine correctly 
copy the source list to the destination list              
A. for all non zero values of cx 
B. only if cx=0001               
C. if cx is in the range 0001 to 00FF  (1 to 255) 
D. if cx is in the range 0001 to 7FFF  (cx appears to be positive) 
E. if cx is in the range 8000 to FFFF  (cx appears to be negative) 


CODE=KEGAI       
End of file
-


**********   HW7.ANS   **********

 1:B
 2:B
 3:D
 4:C
 5:B
End of file
-


**********   HW8.TXT   **********

HW8 - Machine Code 

01. Convert:  mov cx,[varx]  into hex machine code. 
    Varx is a word variable located at hex offset 1000 in the data segment.

02. Convert:  add cl,100  into hex machine code. 

03. Convert:  sub dx,bx  into hex machine code. 

04. Convert:  cmp bx,1000  into hex machine code. 

05. Convert:  mov [vary],-1  into hex machine code. 
    Vary is a byte variable located at hex offset 2000 in the data segment.

06. Given this hex machine code: F6F7  What is the       
    symbolic opcode for that instruction (mul, imul, div, idiv).   

07. Given the same hex machine code: F6F7  What is the   
    size of the data used by that instruction (byte, word).  

08. Given the same hex machine code: F6F7  What is the   
    register specified the r/m field.  

09. Given this hex machine code: 717D  What is the symbolic opcode 
    for this instruction.  

10. This hex machine code represents 1 or more symbolic instructions. 
    7878 
    How many symbolic instructions does it represent? 

End of file
-


**********   HW8.ANS   **********

 1:8B1E0010
 1:8B0E0010
 2:80CE0001
 2:80C164
 3:29D3
 3:29DA
 4:81FBE803
 5:C6060020FF
 6:div
 7:byte
 8:bh
 9:jno
10:1
End of file
-