Test date: 10/23/24  16:30:24 
The number of times you used the grading program is 4 
In the business world, your customer replaces the grading program. 
The goal is a correct program with the fewest grading attempts. 
Linkhll Grading System Version 4.0
Student: Last=Viscount             First=Brendan              Type=Individual          
Grading and testing history log
       User Test.    Date: 10/23/24  15:15:46  user_test    testout      
       User Test.    Date: 10/23/24  15:21:35  user_test    testout      
       User Test.    Date: 10/23/24  15:45:57  user_test    testout      
       User Test.    Date: 10/23/24  15:54:10  user_test    testout      
       User Test.    Date: 10/23/24  15:56:22  user_test    testout      
       User Test.    Date: 10/23/24  15:56:34  user_test    testout      
       User Test.    Date: 10/23/24  16:11:02  user_test    testout      
       User Test.    Date: 10/23/24  16:12:50  user_test    testout      
       User Test.    Date: 10/23/24  16:13:07  user_test    testout      
       User Test.    Date: 10/23/24  16:14:39  user_test    testout      
       User Test.    Date: 10/23/24  16:15:35  user_test    testout      
       User Test.    Date: 10/23/24  16:17:00  user_test    testout      
       User Test.    Date: 10/23/24  16:19:36  user_test    testout      
       User Test.    Date: 10/23/24  16:20:29  user_test    testout      
   *** Grading Run.  Date: 10/23/24  16:20:48 
       User Test.    Date: 10/23/24  16:21:31  user_test    testout      
       User Test.    Date: 10/23/24  16:26:38  user_test    testout      
   *** Grading Run.  Date: 10/23/24  16:26:41 
   *** Grading Run.  Date: 10/23/24  16:28:32 
   *** Grading Run.  Date: 10/23/24  16:30:24 

++ Grade ++   60 = Points earned for correct answers.

+  Your executed instruction count per call is = 00018
+   
+  Target instructions executed per call is:
+  20 points 01 - 18 
+  15 points 19 - 20 
+  10 points 21 - 22 
+   5 points 23 - 24 
+   0 points 25+      
+                     
++ Grade ++   20 = Points earned for code executed efficiency!

-> Analyzing program documentation. 
The heuristic algorithms used may have problems with your specific code. 
Contact the instructor if you detect a problem with your grade. 
DOCPH-0018 The program header format is adequate. 
DOCHB-1.10 Use of code block headers is adequate. 
DOCLC-1.00 Use of line comments is adequate. 
++ Grade ++   20 = Points earned for correct documentation.    

-> Calculating the total grade for the program.                  
This grade is subject to adjustment by the instructor.           
This grade will be reduced by any late submission penalty.       
++ Grade ++  100 = Total grade generated by the Grading System.  

-> Statistics on testing and grading                             
    16  = Number of user tests.                                  
     4  = Number of grading runs to get the program working.     
     0  = Number of grading runs to improve efficiency or documentation. 

+- atyC<6&}xC6&k~C86&juiC86&zuzC766&Zkyz&jgzk@&7658958:&&7<@96@8:&

Building the file linkhll.ans for electronic submission...

;-----------------------------------------------------------
;
; Program: Linkhll
;
; Function: Multiply two largest numbers out of four
;		INPUT: 4 unsigned word-sized numbers 
;			stored on the stack
;
;		OUTPUT: The product of multiplying the
;			two largest numbers in dx:ax
;
; Owner: Brendan Viscount
;
; Date: 10/23/2024
; 11/21/2016   Original Version
;
;
;---------------------------------------
         .model    small               ;
         .8086                         ;
         public    _linkhll            ;
;---------------------------------------
         .data
;---------------------------------------
;
; Data Segment
;
;---------------------------------------
         .code
;---------------------------------------
;
; Code Segment
;
;---------------------------------------
_linkhll: 

	;---------------------------------------
	; Load in parameters from the stack
	;---------------------------------------
	push bp				   ; Save base pointer location
	mov bp, sp             ; Move stack point to base pointer               
    mov ax, [bp + 4]       ; Load v1
    mov bx, [bp + 6]       ; Load v2
    mov cx, [bp + 8]       ; Load v3
    mov dx, [bp + 10]      ; Load v4

;---------------------------------------
;
; SORTING TO GET 2 LARGEST IN AX AND BX
;
;---------------------------------------

	;---------------------------------------
	; Compare ax and cx
	;---------------------------------------
	cmp ax, cx			   ; If cx is above, ax then swap
	ja  skip2			   ; Skip if not
	xchg ax, cx			   ; Swap bx and dx
	;---------------------------------------
	; Compare ax and dx
	;---------------------------------------
skip2:
	cmp ax, dx			   ; If dx is above, ax then swap
	ja skip3			   ; Skip if not
	xchg ax, dx			   ; Swap bx and dx
	;---------------------------------------
	; Compare bx and cx
	;---------------------------------------
skip3:
	cmp bx, cx			   ; If cx is above, bx then swap
	ja skip4			   ; Skip if not
	xchg bx, cx			   ; Swap bx and dx
	;---------------------------------------
	; Compare bx and dx
	;---------------------------------------
skip4:
	cmp bx, dx			   ; If dx is above, bx then swap
	ja mult			   	   ; No more swaps time to multiply
	xchg bx, dx			   ; Swap bx and dx

;---------------------------------------
;
; MULTIPLY
;
;---------------------------------------
mult:
	mul bx				   ; Multiply bx and ax (Largest 2 values now)

;---------------------------------------
;
; RESTORE
;
;---------------------------------------		
	pop bp				   			   ; Restore base pointer
	
	;-----------------------------------
	; Return
	;-----------------------------------
         ret                           ; return
                                       ;
         end                           ; end source code
;---------------------------------------

